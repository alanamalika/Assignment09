{
  
    
        "post0": {
            "title": "ASSIGNMENT 09",
            "content": "Assignment 3 . Pandas and plotting exercises . import pandas as pd . In Week 2, you used a dataset from the CORGIS website. You may have used either the Python, CSV, or JSON data files. . For this assignment, use the CSV file format for the same category of data that you used previously. . billionaires_df = pd.read_csv(&#39;billionaires-Copy1.csv&#39;) . billionaires_df.shape . (1653, 22) . billionaires_df.columns . Index([&#39;name&#39;, &#39;rank&#39;, &#39;year&#39;, &#39;company.founded&#39;, &#39;company.name&#39;, &#39;company.relationship&#39;, &#39;company.sector&#39;, &#39;company.type&#39;, &#39;demographics.age&#39;, &#39;demographics.gender&#39;, &#39;location.citizenship&#39;, &#39;location.country code&#39;, &#39;location.gdp&#39;, &#39;location.region&#39;, &#39;wealth.type&#39;, &#39;wealth.worth in billions&#39;, &#39;wealth.how.category&#39;, &#39;wealth.how.from emerging&#39;, &#39;wealth.how.industry&#39;, &#39;wealth.how.inherited&#39;, &#39;wealth.how.was founder&#39;, &#39;wealth.how.was political&#39;], dtype=&#39;object&#39;) . billionaires_df.dtypes . name object rank int64 year int64 company.founded int64 company.name object company.relationship object company.sector object company.type object demographics.age int64 demographics.gender object location.citizenship object location.country code object location.gdp int64 location.region object wealth.type object wealth.worth in billions float64 wealth.how.category object wealth.how.from emerging bool wealth.how.industry object wealth.how.inherited object wealth.how.was founder bool wealth.how.was political bool dtype: object . billionaires_df.head(2) . name rank year company.founded company.name company.relationship company.sector company.type demographics.age demographics.gender ... location.gdp location.region wealth.type wealth.worth in billions wealth.how.category wealth.how.from emerging wealth.how.industry wealth.how.inherited wealth.how.was founder wealth.how.was political . 0 Bill Gates | 1 | 2014 | 1975 | Microsoft | founder | Software | new | 58 | male | ... | 0 | North America | founder non-finance | 76.0 | New Sectors | True | Technology-Computer | not inherited | True | True | . 1 Carlos Slim Helu | 2 | 2014 | 1990 | Telmex | founder | Communications | privatization | 74 | male | ... | 0 | Latin America | privatized and resources | 72.0 | Non-Traded Sectors | True | Media | not inherited | True | True | . 2 rows × 22 columns . billionaires_df.tail(2) . name rank year company.founded company.name company.relationship company.sector company.type demographics.age demographics.gender ... location.gdp location.region wealth.type wealth.worth in billions wealth.how.category wealth.how.from emerging wealth.how.industry wealth.how.inherited wealth.how.was founder wealth.how.was political . 1651 Zdenek Bakala | 1565 | 2014 | 1994 | Patria Finance | founder | coal | new | 53 | male | ... | 0 | Europe | privatized and resources | 1.0 | Resource Related | True | Mining and metals | not inherited | True | True | . 1652 Zhu Wenchen | 1565 | 2014 | 1999 | Furen Pharmaceutical Group | chairman | pharmaceuticals | new | 48 | male | ... | 0 | East Asia | executive | 1.0 | New Sectors | True | Technology-Medical | not inherited | True | True | . 2 rows × 22 columns . billionaires_df.describe() . rank year company.founded demographics.age location.gdp wealth.worth in billions . count 1653.000000 | 1653.0 | 1653.000000 | 1653.000000 | 1653.0 | 1653.000000 | . mean 809.442226 | 2014.0 | 1948.933454 | 60.928010 | 0.0 | 3.904658 | . std 463.910597 | 0.0 | 170.972278 | 17.697321 | 0.0 | 5.748520 | . min 1.000000 | 2014.0 | 0.000000 | 0.000000 | 0.0 | 1.000000 | . 25% 408.000000 | 2014.0 | 1948.000000 | 52.000000 | 0.0 | 1.400000 | . 50% 828.000000 | 2014.0 | 1972.000000 | 62.000000 | 0.0 | 2.100000 | . 75% 1210.000000 | 2014.0 | 1991.000000 | 72.000000 | 0.0 | 3.700000 | . max 1565.000000 | 2014.0 | 2012.000000 | 98.000000 | 0.0 | 76.000000 | . # Choose a column and print out the column (it&#39;s ok if the output is abbreviated) billionaires_df[&#39;name&#39;] . 0 Bill Gates 1 Carlos Slim Helu 2 Amancio Ortega 3 Warren Buffett 4 Larry Ellison ... 1648 Wu Chung-Yi 1649 Wu Xiong 1650 Yang Keng 1651 Zdenek Bakala 1652 Zhu Wenchen Name: name, Length: 1653, dtype: object . . a = billionaires_df.head(20) b = a[&#39;wealth.worth in billions&#39;] . b.plot . &lt;pandas.plotting._core.PlotAccessor object at 0x7f297e75c760&gt; . # as well as the matching 10 elements of a different column that has interesting text billionaires_df.loc[[0,1,2,3,4,5,6,7,8,9],[&#39;name&#39;,&#39;wealth.worth in billions&#39;]] . name wealth.worth in billions . 0 Bill Gates | 76.0 | . 1 Carlos Slim Helu | 72.0 | . 2 Amancio Ortega | 64.0 | . 3 Warren Buffett | 58.2 | . 4 Larry Ellison | 48.0 | . 5 Charles Koch | 40.0 | . 6 David Koch | 40.0 | . 7 Sheldon Adelson | 38.0 | . 8 Christy Walton | 36.7 | . 9 Jim Walton | 34.7 | . # and make a bar plot with the text values horizontally and the numeric values as the bar heights a.plot(kind=&#39;bar&#39;, x=&#39;name&#39;, y=&#39;wealth.worth in billions&#39;) . &lt;AxesSubplot:xlabel=&#39;name&#39;&gt; . a.plot(kind=&#39;bar&#39;, x=&#39;name&#39;, y=&#39;wealth.worth in billions&#39;) . &lt;AxesSubplot:xlabel=&#39;name&#39;&gt; . # and change at least two aesthetic elements (colors, labels, titles, ...) c = a.plot(kind = &#39;barh&#39;, x = &#39;name&#39;, y = &#39;wealth.worth in billions&#39;) c.legend([&#39;Networth in billions&#39;]) c.set_title(&#39;Networth of Top 20 Billionaires in 2014&#39;, fontsize = 16) c.set_ylabel(&#39;Name&#39;,fontsize = 14) . Text(0, 0.5, &#39;Name&#39;) . Free form section . Choose another type of plot that interests you from the pandas.DataFrame.plot documentation [look at the &#39;kind&#39; parameter] and make a new plot of your dataset values using the plot type | . d = billionaires_df.head(100) d.plot(kind = &#39;scatter&#39;, x = &#39;demographics.age&#39;, y = &#39;wealth.worth in billions&#39;) . &lt;AxesSubplot:xlabel=&#39;demographics.age&#39;, ylabel=&#39;wealth.worth in billions&#39;&gt; . Copy some of your analysis from the Week 2 assignment into new cells below | Clean them up if desired, and make sure that you translate them to work with your new pandas dataframe structure here if needed | Create several plots to complement and extend your analysis | . import billionaires billionaire = billionaires.get_billionaire() . a = billionaire[0][&#39;wealth&#39;][&#39;worth in billions&#39;] b = billionaire[2][&#39;wealth&#39;][&#39;worth in billions&#39;] c = b - a if c &gt; 0: print(&#39;Bill Gates remained a billionaire between 1996 and 2014 and his networth rose by &#39; + str(c) + &#39; billion dollars.&#39;) elif c &lt;= 0: print (&#39;Bill Gates remained a billionaire between 1996 and 2014 but his networth dropped by &#39; + str(c) + &#39; billion dollars.&#39;) . . Bill Gates remained a billionaire between 1996 and 2014 and his networth rose by 57.5 billion dollars. . import pandas as pd billionaires_df = pd.read_csv(&#39;billionaires.csv&#39;) . billionaires_df.head(3) . name rank year company.founded company.name company.relationship company.sector company.type demographics.age demographics.gender ... location.gdp location.region wealth.type wealth.worth in billions wealth.how.category wealth.how.from emerging wealth.how.industry wealth.how.inherited wealth.how.was founder wealth.how.was political . 0 Bill Gates | 1 | 1996 | 1975 | Microsoft | founder | Software | new | 40 | male | ... | 8.100000e+12 | North America | founder non-finance | 18.5 | New Sectors | True | Technology-Computer | not inherited | True | True | . 1 Bill Gates | 1 | 2001 | 1975 | Microsoft | founder | Software | new | 45 | male | ... | 1.060000e+13 | North America | founder non-finance | 58.7 | New Sectors | True | Technology-Computer | not inherited | True | True | . 2 Bill Gates | 1 | 2014 | 1975 | Microsoft | founder | Software | new | 58 | male | ... | 0.000000e+00 | North America | founder non-finance | 76.0 | New Sectors | True | Technology-Computer | not inherited | True | True | . 3 rows × 22 columns . d = billionaires_df.head(3) e = d.plot(x = &#39;year&#39;, y = &#39;wealth.worth in billions&#39;) e.set_title(&#39;Bill Gates Networth from 1996 to 2014&#39;, fontsize = 16) e.set_ylabel(&#39;Networth in billions USD&#39;,fontsize = 14) e.set_xlabel(&#39;year&#39;,fontsize = 14) . Text(0.5, 0, &#39;year&#39;) . billionaires_df.groupby(&#39;location.region&#39;)[[&#39;name&#39;]].count() . name . location.region . 0 1 | . East Asia 535 | . Europe 698 | . Latin America 182 | . Middle East/North Africa 117 | . North America 992 | . South Asia 69 | . Sub-Saharan Africa 20 | . billionaires_df[billionaires_df[&#39;location.region&#39;] == &#39;0&#39;] . name rank year company.founded company.name company.relationship company.sector company.type demographics.age demographics.gender ... location.gdp location.region wealth.type wealth.worth in billions wealth.how.category wealth.how.from emerging wealth.how.industry wealth.how.inherited wealth.how.was founder wealth.how.was political . 671 Ernest Stempel | 222 | 2001 | 1919 | AIG | chairman | insurance | new | 84 | male | ... | 3.680000e+09 | 0 | executive | 2.1 | New Sectors | True | Technology-Medical | not inherited | True | True | . 1 rows × 22 columns . x = billionaires_df.drop(671) x . name rank year company.founded company.name company.relationship company.sector company.type demographics.age demographics.gender ... location.gdp location.region wealth.type wealth.worth in billions wealth.how.category wealth.how.from emerging wealth.how.industry wealth.how.inherited wealth.how.was founder wealth.how.was political . 0 Bill Gates | 1 | 1996 | 1975 | Microsoft | founder | Software | new | 40 | male | ... | 8.100000e+12 | North America | founder non-finance | 18.5 | New Sectors | True | Technology-Computer | not inherited | True | True | . 1 Bill Gates | 1 | 2001 | 1975 | Microsoft | founder | Software | new | 45 | male | ... | 1.060000e+13 | North America | founder non-finance | 58.7 | New Sectors | True | Technology-Computer | not inherited | True | True | . 2 Bill Gates | 1 | 2014 | 1975 | Microsoft | founder | Software | new | 58 | male | ... | 0.000000e+00 | North America | founder non-finance | 76.0 | New Sectors | True | Technology-Computer | not inherited | True | True | . 3 Warren Buffett | 2 | 1996 | 1962 | Berkshire Hathaway | founder | Finance | new | 65 | male | ... | 8.100000e+12 | North America | founder non-finance | 15.0 | Traded Sectors | True | Consumer | not inherited | True | True | . 4 Warren Buffett | 2 | 2001 | 1962 | Berkshire Hathaway | founder | Finance | new | 70 | male | ... | 1.060000e+13 | North America | founder non-finance | 32.3 | Traded Sectors | True | Consumer | not inherited | True | True | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 2609 Wu Chung-Yi | 1565 | 2014 | 1991 | Tingyi | investor | beverages and food | new | 55 | male | ... | 0.000000e+00 | East Asia | executive | 1.0 | Traded Sectors | True | Non-consumer industrial | not inherited | True | True | . 2610 Wu Xiong | 1565 | 2014 | 1999 | Biostime International Holdings | owner | infant formula | new | 0 | male | ... | 0.000000e+00 | East Asia | executive | 1.0 | Traded Sectors | True | Consumer | not inherited | True | True | . 2611 Yang Keng | 1565 | 2014 | 0 | Blue Ray Corp | chairman | real estate | new | 53 | male | ... | 0.000000e+00 | East Asia | self-made finance | 1.0 | Financial | True | Real Estate | not inherited | True | True | . 2612 Zdenek Bakala | 1565 | 2014 | 1994 | Patria Finance | founder | coal | new | 53 | male | ... | 0.000000e+00 | Europe | privatized and resources | 1.0 | Resource Related | True | Mining and metals | not inherited | True | True | . 2613 Zhu Wenchen | 1565 | 2014 | 1999 | Furen Pharmaceutical Group | chairman | pharmaceuticals | new | 48 | male | ... | 0.000000e+00 | East Asia | executive | 1.0 | New Sectors | True | Technology-Medical | not inherited | True | True | . 2613 rows × 22 columns . . z = x.drop_duplicates(subset=[&#39;name&#39;]) z . name rank year company.founded company.name company.relationship company.sector company.type demographics.age demographics.gender ... location.gdp location.region wealth.type wealth.worth in billions wealth.how.category wealth.how.from emerging wealth.how.industry wealth.how.inherited wealth.how.was founder wealth.how.was political . 0 Bill Gates | 1 | 1996 | 1975 | Microsoft | founder | Software | new | 40 | male | ... | 8.100000e+12 | North America | founder non-finance | 18.5 | New Sectors | True | Technology-Computer | not inherited | True | True | . 3 Warren Buffett | 2 | 1996 | 1962 | Berkshire Hathaway | founder | Finance | new | 65 | male | ... | 8.100000e+12 | North America | founder non-finance | 15.0 | Traded Sectors | True | Consumer | not inherited | True | True | . 5 Carlos Slim Helu | 2 | 2014 | 1990 | Telmex | founder | Communications | privatization | 74 | male | ... | 0.000000e+00 | Latin America | privatized and resources | 72.0 | Non-Traded Sectors | True | Media | not inherited | True | True | . 6 Oeri Hoffman and Sacher | 3 | 1996 | 1896 | F. Hoffmann-La Roche | NaN | pharmaceuticals | new | 0 | NaN | ... | 3.300000e+11 | Europe | inherited | 13.1 | New Sectors | True | Technology-Medical | 3rd generation | True | True | . 7 Paul Allen | 3 | 2001 | 1975 | Microsoft | founder | technology | new | 48 | male | ... | 1.060000e+13 | North America | founder non-finance | 30.4 | New Sectors | True | Technology-Computer | not inherited | True | True | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 2609 Wu Chung-Yi | 1565 | 2014 | 1991 | Tingyi | investor | beverages and food | new | 55 | male | ... | 0.000000e+00 | East Asia | executive | 1.0 | Traded Sectors | True | Non-consumer industrial | not inherited | True | True | . 2610 Wu Xiong | 1565 | 2014 | 1999 | Biostime International Holdings | owner | infant formula | new | 0 | male | ... | 0.000000e+00 | East Asia | executive | 1.0 | Traded Sectors | True | Consumer | not inherited | True | True | . 2611 Yang Keng | 1565 | 2014 | 0 | Blue Ray Corp | chairman | real estate | new | 53 | male | ... | 0.000000e+00 | East Asia | self-made finance | 1.0 | Financial | True | Real Estate | not inherited | True | True | . 2612 Zdenek Bakala | 1565 | 2014 | 1994 | Patria Finance | founder | coal | new | 53 | male | ... | 0.000000e+00 | Europe | privatized and resources | 1.0 | Resource Related | True | Mining and metals | not inherited | True | True | . 2613 Zhu Wenchen | 1565 | 2014 | 1999 | Furen Pharmaceutical Group | chairman | pharmaceuticals | new | 48 | male | ... | 0.000000e+00 | East Asia | executive | 1.0 | New Sectors | True | Technology-Medical | not inherited | True | True | . 2076 rows × 22 columns . . m = z.groupby(&#39;location.region&#39;)[[&#39;name&#39;]].count() m . name . location.region . East Asia 447 | . Europe 574 | . Latin America 142 | . Middle East/North Africa 99 | . North America 734 | . South Asia 63 | . Sub-Saharan Africa 17 | . bar = m.plot(kind = &#39;barh&#39;) bar.set_title(&#39;Regional Distribution of Billionaires&#39;, fontsize = 16) bar.legend(&#39;Number of billionaires&#39;,fontsize = 10) bar.set_xlabel(&#39;Number of billionaires&#39;,fontsize = 14) bar.set_ylabel(&#39;Region&#39;,fontsize = 14) . Text(0, 0.5, &#39;Region&#39;) . pie = m.plot.pie(y=&#39;name&#39;, figsize=(12, 10)) pie.set_title(&#39;Regional Distribution of Billionaires&#39;, fontsize = 16) pie.set_xlabel(&#39;Number of billionaires&#39;,fontsize = 14) pie.set_ylabel(&#39;Region&#39;,fontsize = 14) . Text(0, 0.5, &#39;Region&#39;) .",
            "url": "https://alanamalika.github.io/Assignment09/fastpages/jupyter/2022/03/14/Assignment09.html",
            "relUrl": "/fastpages/jupyter/2022/03/14/Assignment09.html",
            "date": " • Mar 14, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://alanamalika.github.io/Assignment09/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://alanamalika.github.io/Assignment09/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://alanamalika.github.io/Assignment09/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://alanamalika.github.io/Assignment09/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}